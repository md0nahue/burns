#!/usr/bin/env ruby

require_relative 'lib/services/s3_service'
require_relative 'lib/services/aws_provisioner'
require_relative 'config/services'

puts "ü™£ S3 Service & AWS Infrastructure Test"
puts "======================================"

begin
  # Initialize services
  puts "\nüîß Initializing services..."
  
  s3_service = S3Service.new
  aws_provisioner = AWSProvisioner.new
  
  puts "‚úÖ Services initialized successfully!"
  
  # Check infrastructure status
  puts "\nüîç Checking infrastructure status..."
  status_result = aws_provisioner.check_infrastructure_status
  
  if status_result[:success]
    puts "‚úÖ All infrastructure components are ready!"
  else
    puts "‚ö†Ô∏è  Some infrastructure components are missing."
    puts "Would you like to provision the infrastructure? (y/n)"
    response = gets.chomp.downcase
    
    if response == 'y'
      puts "\nüöÄ Provisioning infrastructure..."
      provision_result = aws_provisioner.provision_infrastructure
      
      if provision_result[:success]
        puts "‚úÖ Infrastructure provisioning completed!"
      else
        puts "‚ùå Infrastructure provisioning failed: #{provision_result[:error]}"
        exit 1
      end
    else
      puts "‚ùå Infrastructure required. Please run provisioning first."
      exit 1
    end
  end
  
  # Test infrastructure connectivity
  puts "\nüß™ Testing infrastructure connectivity..."
  test_result = aws_provisioner.test_infrastructure
  
  unless test_result[:success]
    puts "‚ùå Infrastructure tests failed. Please check your AWS configuration."
    exit 1
  end
  
  puts "‚úÖ Infrastructure connectivity verified!"
  
  # Get infrastructure details
  puts "\nüìã Infrastructure Details:"
  details = aws_provisioner.get_infrastructure_details
  
  details.each do |component, info|
    if info.is_a?(Hash) && info[:error]
      puts "  ‚ùå #{component}: #{info[:error]}"
    elsif info.is_a?(Hash)
      puts "  ‚úÖ #{component}:"
      info.each do |key, value|
        puts "    #{key}: #{value}"
      end
    end
  end
  
  # Example S3 operations (commented out since we don't have actual images)
  puts "\nüìù Example S3 Operations:"
  puts "```ruby"
  puts "# Create bucket (if needed)"
  puts "result = s3_service.create_bucket('my-burns-videos', {"
  puts "  lifecycle_days: 14,"
  puts "  versioning: true,"
  puts "  cors: true"
  puts "})"
  puts ""
  puts "# Upload project images"
  puts "upload_result = s3_service.upload_project_images("
  puts "  'project-123',"
  puts "  generated_images,"
  puts "  'burns-videos'"
  puts ")"
  puts ""
  puts "# Create project manifest"
  puts "manifest_result = s3_service.create_project_manifest("
  puts "  'project-123',"
  puts "  project_data,"
  puts "  'burns-videos'"
  puts ")"
  puts ""
  puts "# List project files"
  puts "files = s3_service.list_project_files('project-123', 'burns-videos')"
  puts ""
  puts "# Clean up old projects"
  puts "cleanup_result = s3_service.cleanup_old_projects('burns-videos', 14)"
  puts "```"
  
  # Show S3 bucket structure
  puts "\nüìÅ S3 Bucket Structure:"
  puts "```"
  puts "burns-videos/"
  puts "‚îú‚îÄ‚îÄ projects/"
  puts "‚îÇ   ‚îú‚îÄ‚îÄ project-123/"
  puts "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ images/"
  puts "‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modern_smartphone_20241201_143022.jpg"
  puts "‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tech_workspace_20241201_143023.jpg"
  puts "‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ..."
  puts "‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ manifest.json"
  puts "‚îÇ   ‚îú‚îÄ‚îÄ project-456/"
  puts "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ images/"
  puts "‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ manifest.json"
  puts "‚îÇ   ‚îî‚îÄ‚îÄ ..."
  puts "‚îî‚îÄ‚îÄ videos/"
  puts "    ‚îú‚îÄ‚îÄ project-123_final_video.mp4"
  puts "    ‚îî‚îÄ‚îÄ ..."
  puts "```"
  
  # Show lifecycle policy
  puts "\n‚è∞ Lifecycle Policy:"
  puts "  ‚Ä¢ Projects older than 14 days are automatically deleted"
  puts "  ‚Ä¢ Helps manage storage costs"
  puts "  ‚Ä¢ Configurable via bucket settings"
  
  # Show security features
  puts "\nüîí Security Features:"
  puts "  ‚Ä¢ IAM roles and policies for secure access"
  puts "  ‚Ä¢ Presigned URLs for temporary access"
  puts "  ‚Ä¢ Metadata tracking for all uploads"
  puts "  ‚Ä¢ Versioning support (optional)"
  
  # Show integration with pipeline
  puts "\nüîÑ Pipeline Integration:"
  puts "  1. Images generated by ImageGenerator"
  puts "  2. Uploaded to S3 via S3Service"
  puts "  3. Manifest created with project metadata"
  puts "  4. Lambda function processes images from S3"
  puts "  5. Final video uploaded back to S3"
  
rescue => e
  puts "\n‚ùå Error: #{e.message}"
  puts "\nTo fix this:"
  puts "1. Install AWS SDK: gem install aws-sdk-s3"
  puts "2. Configure AWS credentials: aws configure"
  puts "3. Set environment variables:"
  puts "   export AWS_ACCESS_KEY_ID='your_key'"
  puts "   export AWS_SECRET_ACCESS_KEY='your_secret'"
  puts "   export AWS_REGION='us-east-1'"
end

puts "\nüöÄ Next Steps:"
puts "1. Install AWS SDK: gem install aws-sdk-s3"
puts "2. Configure AWS credentials: aws configure"
puts "3. Provision infrastructure: ruby provision_aws.rb"
puts "4. Test S3 operations with real images"
puts "5. Build Lambda video generation function"

puts "\nüìö Documentation:"
puts "  ‚Ä¢ AWS SDK for Ruby: https://docs.aws.amazon.com/sdk-for-ruby/"
puts "  ‚Ä¢ S3 API Reference: https://docs.aws.amazon.com/s3/"
puts "  ‚Ä¢ Lambda API Reference: https://docs.aws.amazon.com/lambda/" 